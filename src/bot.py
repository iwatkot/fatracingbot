import io
import os
import secrets

from enum import Enum
from re import escape, match
from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from aiocron import crontab
from PIL import Image

import folium
import validators

import globals as g
import database as db

logger = g.Logger(__name__)

bot = Bot(token=g.AppState.Bot.token)

dp = Dispatcher(bot=bot)


class Messages(Enum):
    START = (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç FATRACING.\n"
        "–û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≥–æ–Ω–∫–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö.\n"
        "–ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–∏–º "
        "—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –Ω–∞ —Å–æ—Å—Ç–æ—è–≤—à–∏—Ö—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤—ã —ç—Ç–æ–≥–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É."
    )

    MENU_CHANGED = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª  `{}`"

    REG_FIRST_NAME = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ."
    REG_LAST_NAME = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é. –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ."
    REG_GENDER = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª. –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ."
    REG_BIRTHDAY = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì`. –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ."
    REG_EMAIL = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É. –≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ."
    REG_PHONE = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+7XXXXXXXXXX`. –≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ."

    REG_CANCELLED = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
    REG_SUCCESS = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!"
    WRONG_GENDER = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª."
    WRONG_EMAIL = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É."
    WRONG_NAME = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è."
    WRONG_BIRTHDAY = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è."
    WRONG_PHONE = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."

    USER_INFO = (
        "`–ò–º—è:` {first_name}\n`–§–∞–º–∏–ª–∏—è:` {last_name}\n"
        "`–ü–æ–ª:` {gender}\n`–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:` {birthday}\n"
        "`Email:` {email}\n`–¢–µ–ª–µ—Ñ–æ–Ω:` {phone}\n"
    )

    EDIT_CANCELLED = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    EDIT_SUCCESS = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

    NO_RACE = "–°–µ–≥–æ–¥–Ω—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–π –≥–æ–Ω–∫–∏."

    ONLY_FOR_REGISTERED = "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."
    ONLY_FOR_PARTICIPANTS = (
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥–æ–Ω–∫–∏. "
        "–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    )

    TRANSLATION_REQUEST = (
        "\n\n–ú—ã  `—É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–∏–º`  –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤  `–≤–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏`  –Ω–∞ –≤—Ä–µ–º—è –≥–æ–Ω–∫–∏. "
        "–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –∑—Ä–∏—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –≥–æ–Ω—â–∏–∫–æ–≤ –Ω–∞ "
        "–∫–∞—Ä—Ç–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è "
        "–ø—Ä–æ–±–ª–µ–º, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã —Å–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–µ–µ –æ–∫–∞–∑–∞—Ç—å –≤–∞–º –ø–æ–º–æ—â—å.\n\n"
        "–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ."
    )

    TRANSLATION_TOOLTIP = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Telegram –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –º–æ–∂–µ—Ç  –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤  `—Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ`. "
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞—á–Ω–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞.\n"
        "–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏, –∑–∞—Ç–µ–º –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è "
        "–≤–∞—à–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ –∏ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤."
    )
    TRANSLATION_LIVE = (
        "–ë–æ—Ç –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à–∏ –≥–µ–æ–¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Telegram –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à—É "
        "–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤  `—Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ`  –∏  `–Ω–µ –æ—Ç–∫–ª—é—á–∞–π—Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é`  –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–Ω–∫–∏. –°–ø–∞—Å–∏–±–æ."
    )
    TRANSLATION_NOT_LIVE = (
        "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –±–æ—Ç—É —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –Ω–æ  `–Ω–µ –≤–∫–ª—é—á–∏–ª–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é`  –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ."
    )

    NO_EVENTS = "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥–æ–Ω–∫–∏."
    RACE_INFO = (
        "`{name}`\n\n–°—Ç–∞—Ä—Ç:  `{start}`\n–î–∏—Å—Ç–∞–Ω—Ü–∏—è:  `{distance} –∫–º`\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:  {categories}"
    )

    PAYMENT_INSTRUCTIONS = (
        "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ–Ω–∫–∏.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,  `–æ–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ`  –≤ –≥–æ–Ω–∫–µ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ—Ç–∞.\n\n"
        "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:  `{price}`\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü:  `{phone}`\n"
        "–°–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤:  `{banks}`\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å:  `{cred}`\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, –∫–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. "
        "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    HELP_WITH_COORDS = (
        "–ë–æ—Ç —É–∂–µ –∑–Ω–∞–µ—Ç –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫—Ä–∞—Ç–∫–æ —Å–æ–æ–±—â–∏—Ç–µ —á—Ç–æ —É –≤–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å. "
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
    )

    HELP_NO_COORDS = ""  # TODO: Add text.

    SOS_MESSAGE = (
        "üö® –ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏.\n\nTelegram username: {telegram_username}\n"
    )

    def format(self, *args, **kwargs):
        return escape(self.value.format(*args, **kwargs))

    def escaped(self):
        return escape(self.value)


class Buttons(Enum):
    # * Context buttons.
    BTN_CANCEL = "–û—Ç–º–µ–Ω–∞"
    BTN_SKIP = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    BTN_CONFIRM = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    BTN_GENDER_M = "–ú—É–∂—Å–∫–æ–π"
    BTN_GENDER_F = "–ñ–µ–Ω—Å–∫–∏–π"
    GENDERS = [BTN_GENDER_M, BTN_GENDER_F]

    # * Main menu buttons.
    BTN_ACCOUNT = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    BTN_DURING_RACE = "–í–æ –≤—Ä–µ–º—è –≥–æ–Ω–∫–∏"
    BTN_EVENTS = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    BTN_INFO = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    BTN_MAIN = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    BTN_ADMIN = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"

    # * Account menu buttons.
    BTN_ACCOUNT_NEW = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    BTN_ACCOUNT_INFO = "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"
    BTN_ACCOUNT_EDIT = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"

    # * During race menu buttons.
    BTN_TRANSLATION = "–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
    BTN_LEADERBOARD = "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"
    BTN_YOUR_STATUS = "–í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
    BTN_NEED_HELP = "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"

    # * Events menu buttons.
    UPCOMING_EVENTS = "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≥–æ–Ω–∫–∏"

    # * Main menus.
    MN_MAIN_USER = [BTN_ACCOUNT, BTN_DURING_RACE, BTN_EVENTS, BTN_INFO, BTN_ADMIN]
    MN_MAIN_ADMIN = [
        BTN_ACCOUNT,
        BTN_DURING_RACE,
        BTN_EVENTS,
        BTN_INFO,
        BTN_ADMIN,
        BTN_ADMIN,
    ]

    # * Account menus.
    MN_ACCOUNT_NEW = [BTN_ACCOUNT_NEW, BTN_MAIN]
    MN_ACCOUNT_EXIST = [BTN_ACCOUNT_INFO, BTN_ACCOUNT_EDIT, BTN_MAIN]
    MN_REG = [BTN_CANCEL, BTN_SKIP]
    MN_REG_GENDER = [BTN_GENDER_M, BTN_GENDER_F, BTN_CANCEL]
    MN_REG_CONFIRM = [BTN_CONFIRM, BTN_CANCEL]

    # * During race menu.
    MN_DURING_RACE = [
        BTN_TRANSLATION,
        BTN_LEADERBOARD,
        BTN_YOUR_STATUS,
        BTN_NEED_HELP,
        BTN_MAIN,
    ]

    # * Events menu.
    MN_EVENTS = [UPCOMING_EVENTS, BTN_MAIN]


#####################################
##### * Handlers for /commands ######
#####################################


@dp.message_handler(commands=["start"])
async def test(message: types.Message):
    await log_event(message)

    if await is_admin(message):
        reply_markup = await keyboard(Buttons.MN_MAIN_ADMIN.value)
    else:
        reply_markup = await keyboard(Buttons.MN_MAIN_USER.value)

    await bot.send_message(
        message.from_user.id, Messages.START.value, reply_markup=reply_markup
    )


#####################################
#### * Handlers for menu buttons ####
#####################################


@dp.message_handler(Text(equals=Buttons.BTN_MAIN.value))
async def button_main(message: types.Message):
    await log_event(message)

    if await is_admin(message):
        reply_markup = await keyboard(Buttons.MN_MAIN_ADMIN.value)
    else:
        reply_markup = await keyboard(Buttons.MN_MAIN_USER.value)

    await bot.send_message(
        message.from_user.id,
        Messages.MENU_CHANGED.format(Buttons.BTN_MAIN.value),
        reply_markup=reply_markup,
        parse_mode="MarkdownV2",
    )


@dp.message_handler(Text(equals=Buttons.BTN_ACCOUNT.value))
async def button_account(message: types.Message):
    await log_event(message)

    if await db.get_user(message.from_user.id):
        reply_markup = await keyboard(Buttons.MN_ACCOUNT_EXIST.value)
    else:
        reply_markup = await keyboard(Buttons.MN_ACCOUNT_NEW.value)

    await bot.send_message(
        message.from_user.id,
        Messages.MENU_CHANGED.format(message.text),
        reply_markup=reply_markup,
        parse_mode="MarkdownV2",
    )


@dp.message_handler(Text(equals=Buttons.BTN_DURING_RACE.value))
async def button_during_race(message: types.Message()):
    await log_event(message)

    reply_markup = await keyboard(Buttons.MN_DURING_RACE.value)

    await bot.send_message(
        message.from_user.id,
        Messages.MENU_CHANGED.format(message.text),
        reply_markup=reply_markup,
        parse_mode="MarkdownV2",
    )


@dp.message_handler(Text(equals=Buttons.BTN_EVENTS.value))
async def button_events(message: types.Message):
    await log_event(message)

    reply_markup = await keyboard(Buttons.MN_EVENTS.value)

    await bot.send_message(
        message.from_user.id,
        Messages.MENU_CHANGED.format(message.text),
        reply_markup=reply_markup,
        parse_mode="MarkdownV2",
    )


#####################################
#### * Account buttons handlers #####
#####################################


@dp.message_handler(Text(equals=Buttons.BTN_ACCOUNT_NEW.value))
async def button_account_new(message: types.Message):
    await log_event(message)

    if await db.get_user(message.from_user.id):
        return

    reply_markup = await keyboard([Buttons.BTN_CANCEL.value])

    await bot.send_message(
        message.from_user.id,
        Messages.REG_FIRST_NAME.escaped(),
        parse_mode="MarkdownV2",
        reply_markup=reply_markup,
    )

    dp.register_message_handler(register)


@dp.message_handler(Text(equals=Buttons.BTN_ACCOUNT_INFO.value))
async def button_account_info(message: types.Message):
    await log_event(message)

    user = await get_user_json(message.from_user.id)
    if not user:
        return

    for key, value in user.items():
        if not value:
            user[key] = "–Ω–µ —É–∫–∞–∑–∞–Ω"
        if key == "birthday":
            user[key] = value.strftime("%d.%m.%Y")

    reply = escape("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n") + Messages.USER_INFO.format(**user)

    await bot.send_message(
        message.from_user.id,
        reply,
        parse_mode="MarkdownV2",
    )


@dp.message_handler(Text(equals=Buttons.BTN_ACCOUNT_EDIT.value))
async def button_account_edit(message: types.Message):
    await log_event(message)

    user = await get_user_json(message.from_user.id)
    if not user:
        return

    buttons = {}

    for key, value in user.items():
        if key == "telegram_id":
            continue

        if key == "birthday":
            value = value.strftime("%d.%m.%Y")

        if value is None:
            if key == "email":
                value = "—É–∫–∞–∑–∞—Ç—å email"
            elif key == "phone":
                value = "—É–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
        key = f"user_edit_{key}"
        buttons[key] = value

    reply_markup = await keyboard(buttons)
    reply = escape("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n")

    await bot.send_message(
        message.from_user.id, reply, parse_mode="MarkdownV2", reply_markup=reply_markup
    )


#####################################
## * During race buttons handlers ###
#####################################


@dp.message_handler(Text(equals=Buttons.BTN_TRANSLATION.value))
async def button_translation(message: types.Message):
    await log_event(message)

    race = await db.get_race_by_date()

    if not race:
        await bot.send_message(message.from_user.id, Messages.NO_RACE.value)
        return

    reply = escape(
        f"–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≥–æ–Ω–∫–∞  `{race.name}`\n\n"
        f"–°—Ç–∞—Ä—Ç:  `{datetime.strftime(race.start, '%H:%M')}` \n–î–∏—Å—Ç–∞–Ω—Ü–∏—è:  `{race.distance} –∫–º`"
    )

    #####################################
    #### ! UNCOMMENT AFTER TDS RACE #####
    #####################################
    # user = await db.get_user(message.from_user.id)
    # if not user:
    #    await bot.send_message(message.from_user.id, Messages.ONLY_FOR_REGISTERED.value)
    #    return
    #
    # if user not in race.participants:
    #    await bot.send_message(
    #        message.from_user.id, Messages.ONLY_FOR_PARTICIPANTS.value
    #    )
    #    return
    #####################################
    ### ! ENDBLOCK UNCOMMENT AFTER TDS ##
    #####################################

    reply += Messages.TRANSLATION_REQUEST.escaped()
    reply_markup = await keyboard({"location_translation": "–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"})

    await bot.send_message(
        message.from_user.id, reply, parse_mode="MarkdownV2", reply_markup=reply_markup
    )


@dp.message_handler(Text(equals=Buttons.BTN_NEED_HELP.value))
async def button_need_help(message: types.Message):
    await log_event(message)

    coords = g.AppState.location_data.get(message.from_user.id)

    if not coords:
        # TODO: ask for location with registered next handler
        return

    await bot.send_message(
        message.from_user.id,
        Messages.HELP_WITH_COORDS.value,
    )

    dp.register_message_handler(send_sos_message)


#####################################
##### * Events buttons handlers #####
#####################################


@dp.message_handler(Text(equals=Buttons.UPCOMING_EVENTS.value))
async def button_upcoming_events(message: types.Message):
    await log_event(message)

    events = await db.get_upcoming_races()

    if not events:
        await bot.send_message(message.from_user.id, Messages.NO_EVENTS.value)
        return

    reply = escape("–ë–ª–∏–∂–∞–π—à–∏–µ –≥–æ–Ω–∫–∏:\n\n")

    events_data = {}

    for event in events:
        event = event.to_mongo()
        date = event["start"].strftime("%d.%m.%Y")
        text = f"{date} - {event['name']}"
        callback_data = f"race_info_{event['name']}"
        events_data[callback_data] = text

    reply_markup = await keyboard(events_data)

    await bot.send_message(
        message.from_user.id, reply, parse_mode="MarkdownV2", reply_markup=reply_markup
    )


#####################################
####### * Location handlers #########
#####################################


@dp.message_handler(content_types=types.ContentType.LOCATION)
async def translation_started(message: types.Message):
    if message.location.live_period:
        logger.info(f"User {message.from_user.id} started live location translation.")

        await bot.send_message(
            chat_id=message.from_user.id,
            text=Messages.TRANSLATION_LIVE.escaped(),
            parse_mode="MarkdownV2",
        )
    else:
        logger.warning(f"User {message.from_user.id} sent NOT live location.")

        await bot.send_message(
            chat_id=message.from_user.id,
            text=Messages.TRANSLATION_NOT_LIVE.escaped(),
            parse_mode="MarkdownV2",
        )


@dp.edited_message_handler(content_types=types.ContentType.LOCATION)
async def translation(message: types.Message):
    if not message.location.live_period:
        return

    logger.info(
        f"User {message.from_user.id} sent live location. "
        f"Lat: {message.location.latitude}, Lon: {message.location.longitude}"
    )

    g.AppState.location_data[message.from_user.id] = [
        message.location.latitude,
        message.location.longitude,
    ]

    logger.debug(
        f"Saved location data for user {message.from_user.id} in global state."
    )


#####################################
######## * Crontab handlers #########
#####################################

LAT = 36.6277
LON = 31.765989


@crontab(g.MAP_TICKRATE)
async def map_update():
    logger.debug("Crontab rule started...")

    #####################################
    #### ? How to clear global state? ###
    #####################################

    if not g.AppState.location_data:
        return

    #####################################
    ### ! MOSTLY FOR DEBUGGING PURPOSE ##
    #####################################

    m = folium.Map(location=[LAT, LON], zoom_start=13)
    for telegram_id, coords in g.AppState.location_data.items():
        folium.Marker(coords, popup=telegram_id).add_to(m)

    logger.debug(f"Map created, added {len(g.AppState.location_data)} markers.")

    img_data = m._to_png(5)
    img = Image.open(io.BytesIO(img_data))

    img_path = os.path.join(g.TMP_DIR, "map.png")

    img.save(img_path)

    logger.debug(f"Map image saved to {img_path}, trying to send...")

    photo = InputFile(img_path)

    await bot.send_photo(g.DEBUG_CHAT_ID, photo)


#####################################
######## * Callback handlers ########
#####################################


@dp.callback_query_handler(text_contains="user_edit_")
async def callback_user_edit(callback_query: types.CallbackQuery):
    await log_event(callback_query)

    query = callback_query.data
    reply_markup = await keyboard([Buttons.BTN_CANCEL.value])

    if query.endswith("first_name"):
        reply = Messages.REG_FIRST_NAME.escaped()
        field = "first_name"
    elif query.endswith("last_name"):
        reply = Messages.REG_LAST_NAME.escaped()
        field = "last_name"
    elif query.endswith("gender"):
        reply = Messages.REG_GENDER.escaped()
        reply_markup = await keyboard(Buttons.GENDERS.value)
        field = "gender"
    elif query.endswith("birthday"):
        reply = Messages.REG_BIRTHDAY.escaped()
        field = "birthday"
    elif query.endswith("email"):
        reply = Messages.REG_EMAIL.escaped()
        field = "email"
    elif query.endswith("phone"):
        reply = Messages.REG_PHONE.escaped()
        field = "phone"
    else:
        return

    g.AppState.user_edit_field = field
    dp.register_message_handler(edit_user)

    await bot.send_message(
        callback_query.from_user.id,
        reply,
        parse_mode="MarkdownV2",
        reply_markup=reply_markup,
    )


@dp.callback_query_handler(text_contains="location_translation")
async def callback_location_translation(callback_query: types.CallbackQuery):
    await log_event(callback_query)

    await bot.send_message(
        callback_query.from_user.id,
        Messages.TRANSLATION_TOOLTIP.escaped(),
        parse_mode="MarkdownV2",
    )


@dp.callback_query_handler(text_contains="race_info_")
async def callback_race_info(callback_query: types.CallbackQuery):
    await log_event(callback_query)

    race_name = callback_query.data.rsplit("_", 1)[-1]
    race = await db.get_upcoming_race_by_name(race_name)

    race_json = race.to_mongo()

    race_json["start"] = race_json["start"].strftime("%d.%m.%Y %H:%M")
    race_json["categories"] = ", ".join(race_json["categories"])

    reply = Messages.RACE_INFO.format(**race_json)

    user = await db.get_user(callback_query.from_user.id)

    if user in race.participants:
        payment = await db.get_payment(callback_query.message.from_user.id, race)

        if not payment:
            text = " | –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        elif not payment.verified:
            text = " | –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        else:
            text = " | –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"

        button = {secrets.token_hex(10): "–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã" + text}
    elif race.registration_open:
        button = {
            f"race_choose_category_{race_name}": f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≥–æ–Ω–∫—É ({race.price}‚ÇΩ)"
        }
    else:
        button = {secrets.token_hex(10): "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞"}

    reply_markup = await keyboard(button)

    await bot.send_message(
        callback_query.from_user.id,
        reply,
        parse_mode="MarkdownV2",
        reply_markup=reply_markup,
    )


@dp.callback_query_handler(text_contains="race_choose_category_")
async def callback_race_choose_category(callback_query: types.CallbackQuery):
    await log_event(callback_query)

    race_name = callback_query.data.rsplit("_", 1)[-1]
    race = await db.get_upcoming_race_by_name(race_name)

    user = await db.get_user(callback_query.from_user.id)

    if not (race and user):
        return

    gender_code = user.gender[0].lower()
    categories = [ct for ct in race.categories if ct.lower().startswith(gender_code)]
    buttons = {f"race_register_{race_name};{ct}": ct for ct in categories}

    reply_markup = await keyboard(buttons)
    reply = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"

    await bot.send_message(
        callback_query.from_user.id, reply, reply_markup=reply_markup
    )


@dp.callback_query_handler(text_contains="race_register_")
async def callback_race_register(callback_query: types.CallbackQuery):
    await log_event(callback_query)

    race_and_category_names = callback_query.data.rsplit("_", 1)[-1]
    race_name, category = race_and_category_names.split(";")

    race = await db.get_upcoming_race_by_name(race_name)

    if await db.register_to_race(callback_query.from_user.id, race_name, category):
        reply = Messages.PAYMENT_INSTRUCTIONS.format(
            price=race.price,
            phone=g.SBP_PHONE,
            banks=g.SBP_BANKS,
            cred=g.SBP_CRED,
        )

        await bot.send_message(
            callback_query.from_user.id,
            reply,
            parse_mode="MarkdownV2",
        )

    else:
        await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")


#####################################
####### * Registered handlers #######
#####################################


async def edit_user(message: types.Message):
    await log_event(message)

    if message.text == Buttons.BTN_CANCEL.value:
        dp.message_handlers.unregister(edit_user)

        await bot.send_message(message.from_user.id, Messages.EDIT_CANCELLED.value)
        await button_main(message)

        return

    unregister_handler = False
    field = g.AppState.user_edit_field

    if field == "first_name":
        if message.text.isalpha():
            unregister_handler = True
            value = message.text
        else:
            reply = Messages.WRONG_NAME.escaped()
    elif field == "last_name":
        if message.text.isalpha():
            unregister_handler = True
            value = message.text
        else:
            reply = Messages.WRONG_NAME.escaped()
    elif field == "gender":
        if message.text in Buttons.GENDERS.value:
            unregister_handler = True
            value = message.text
        else:
            reply = Messages.WRONG_GENDER.escaped()
    elif field == "birthday":
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y").date()
            value = date
            unregister_handler = True
        except ValueError:
            reply = Messages.WRONG_BIRTHDAY.escaped()
    elif field == "email":
        if validators.email(message.text) is True:
            unregister_handler = True
            value = message.text
        else:
            reply = Messages.WRONG_EMAIL.escaped()
    elif field == "phone":
        if await is_phone_number(message.text):
            unregister_handler = True
            value = message.text
        else:
            reply = Messages.WRONG_PHONE.escaped()

    if unregister_handler:
        dp.message_handlers.unregister(edit_user)

        await db.update_user(message.from_user.id, **{field: value})

        await bot.send_message(message.from_user.id, Messages.EDIT_SUCCESS.value)
        await button_main(message)
    else:
        await bot.send_message(message.from_user.id, reply, parse_mode="MarkdownV2")


async def register(message: types.Message):
    await log_event(message)

    user = g.AppState.user_data.get(message.from_user.id)

    if message.text == Buttons.BTN_CANCEL.value:
        dp.message_handlers.unregister(register)

        g.AppState.user_data.pop(message.from_user.id, None)

        await bot.send_message(message.from_user.id, Messages.REG_CANCELLED.value)
        await button_main(message)

        return

    if not user:
        reply_markup = await keyboard([Buttons.BTN_CANCEL.value])

        if message.text.isalpha():
            g.AppState.user_data[message.from_user.id] = {"first_name": message.text}
            reply = Messages.REG_LAST_NAME.escaped()
        else:
            reply = Messages.WRONG_NAME.escaped()

    elif "phone" in user:
        if message.text == Buttons.BTN_CONFIRM.value:
            user["telegram_id"] = message.from_user.id
            await db.new_user(**user)

            await bot.send_message(message.from_user.id, Messages.REG_SUCCESS.value)
            await button_main(message)

            return

    elif "email" in user:
        if message.text == Buttons.BTN_SKIP.value:
            show_preview = True
            user["phone"] = None

        elif await is_phone_number(message.text) is not True:
            show_preview = False
            reply = Messages.WRONG_PHONE.escaped()
            reply_markup = await keyboard(Buttons.MN_REG.value)
        else:
            show_preview = True
            user["phone"] = message.text

        if show_preview:
            reply = escape(
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
            ) + Messages.USER_INFO.format(**user)

            reply_markup = await keyboard(Buttons.MN_REG_CONFIRM.value)

    elif "birthday" in user:
        reply = Messages.REG_PHONE.escaped()
        reply_markup = await keyboard(Buttons.MN_REG.value)

        if message.text == Buttons.BTN_SKIP.value:
            user["email"] = None
        elif validators.email(message.text) is not True:
            reply = Messages.WRONG_EMAIL.escaped()
        else:
            user["email"] = message.text
    elif "gender" in user:
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y").date()
            user["birthday"] = date
            reply = Messages.REG_EMAIL.escaped()
            reply_markup = await keyboard(Buttons.MN_REG.value)
        except ValueError:
            reply = Messages.WRONG_BIRTHDAY.escaped()
            reply_markup = await keyboard([Buttons.BTN_CANCEL.value])

    elif "last_name" in user:
        if message.text not in Buttons.GENDERS.value:
            reply = Messages.WRONG_GENDER.escaped()
            reply_markup = await keyboard(Buttons.MN_REG_GENDER.value)
        else:
            reply = Messages.REG_BIRTHDAY.escaped()
            reply_markup = await keyboard([Buttons.BTN_CANCEL.value])
            user["gender"] = message.text
    elif "first_name" in user:
        if message.text.isalpha():
            user["last_name"] = message.text
            reply = Messages.REG_GENDER.escaped()
            reply_markup = await keyboard(Buttons.MN_REG_GENDER.value)
        else:
            reply = Messages.WRONG_NAME.escaped()
            reply_markup = await keyboard([Buttons.BTN_CANCEL.value])

    await bot.send_message(
        message.from_user.id, reply, reply_markup=reply_markup, parse_mode="MarkdownV2"
    )


async def send_sos_message(message: types.Message):
    telegram_username = message.from_user.username
    telegram_username = (
        f"@{telegram_username}" if telegram_username else "—Å–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"
    )
    sos = Messages.SOS_MESSAGE.format(telegram_username=telegram_username)

    dp.message_handlers.unregister(send_sos_message)

    user = await db.get_user(message.from_user.id)

    if user:
        sos += (
            f"–ò–º—è:  `{user.first_name}`\n–§–∞–º–∏–ª–∏—è:  `{user.last_name}`\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω:  `{user.phone}`\n"
        )

    sos += f"\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"

    await bot.send_message(g.TEAM_CHAT_ID, sos, parse_mode="MarkdownV2")

    latitude, longitude = g.AppState.location_data.get(message.from_user.id)

    await bot.send_location(g.TEAM_CHAT_ID, latitude, longitude)


#####################################
######## * Utility functions ########
#####################################


async def get_user_json(telegram_id):
    user = await db.get_user(telegram_id)
    if not user:
        return

    user = user.to_mongo()
    user["email"] = user.get("email")
    user["phone"] = user.get("phone")
    user.pop("_id")

    return user


async def is_phone_number(phone: str):
    pattern = r"^\+7\d{10}$"
    res = match(pattern, phone)
    return res is not None


async def keyboard(buttons: list | dict):
    if isinstance(buttons, list):
        keyboard = ReplyKeyboardMarkup(
            resize_keyboard=True,
        )
        for button in buttons:
            keyboard.add(KeyboardButton(button))

    elif isinstance(buttons, dict):
        keyboard = InlineKeyboardMarkup(
            row_width=2,
        )
        for callback_data, text in buttons.items():
            keyboard.add(InlineKeyboardButton(callback_data=callback_data, text=text))

    return keyboard


async def is_admin(data: dict):
    return data.from_user.id in g.AppState.Bot.admins


async def log_event(data: dict):
    try:
        logger.debug(
            f"Message from {data.from_user.username} with telegram ID {data.from_user.id}: {data.text}"
        )
    except AttributeError:
        logger.debug(
            f"Callback from {data.from_user.username} with telegram ID {data.from_user.id}: {data.data}"
        )


if __name__ == "__main__":
    executor.start_polling(dp)
